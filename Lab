#include <iostream>
#include <string>

using namespace std;

string operations = "+-*/";

struct list 
{
	string symbol;
	list* next;
};

struct Stack 
{
	list* tail;
	Stack() : tail(nullptr) {}
	bool isEmpty() 
	{
		if (tail == nullptr)
		{
			return 1;
		}
		else 
		{
			return 0;
		}
	}
	void output() 
	{
		cout << "The stack of operators: ";
		list* curr = tail;
		if (!curr) 
		{
			cout << "The stack is empty.";
		}
		while (curr) 
		{
			cout << curr->symbol << " ";
			curr = curr->next;
		}
		cout << "\n";
	}
	string pop(bool print = 1) 
	{
		if (tail == nullptr) 
		{
			return "end";
		}
		if (print) 
		{
			cout << tail->symbol << " ";
		}
		string answer = tail->symbol;
		list* p = new list;
		p = tail;
		tail = tail->next;
		p->next = nullptr;
		delete p;
		return answer;
	}
	void push(string sym) 
	{
		list* p = new list;
		p->symbol = sym;
		p->next = tail;
		tail = p;
	}
};

int prior(char c) 
{
	switch (c) 
	{
	case '(': 
		return 1;
	case '+': 
	case '-': 
		return 2;
	case '*': 
	case '/': 
		return 3;
	default: 
		return 0;
	}
}

bool correctInputInfix(string& data) 
{
	bool flagOper = 0; 
	bool flagBracket = 0;
	int countNum = 0; 
	int countOper = 0;
	for (int i = 0; i < data.length(); ++i) 
	{
		if (data[i] == ' ') 
		{
			data.erase(i, 1);
		}
	}
	for (int i = 0; i < data.length(); ++i) 
	{
		if (data[i] == '(') 
		{
			if (!flagOper && i != 0 || flagBracket || operations.find(data[i + 1]) != -1) 
			{
				return 0;
			}
			flagBracket = 1;
		}
		else if (data[i] == ')') 
		{
			if (!flagBracket || flagOper || i != data.length() - 1 && operations.find(data[i + 1]) == -1) 
			{
				return 0;
			}
			flagBracket = 0;
		}
		else if (data[i] >= '0' && data[i] <= '9' || data[i] == '.') 
		{
			flagOper = 0;
		}
		else if (operations.find(data[i]) != -1) 
		{
			if (i == 0 || i == data.length() - 1) 
			{
				return 0;
			}
			if (flagOper) 
			{
				return 0;
			}
			flagOper = 1;
		}
		else if (data[i] == '\0') 
		{
			continue;
		}
		else 
		{
			return 0;
		}
	}
	return 1;
}

bool correctInputPostfix(string& data) 
{
	int countOper = 0; 
	int countNum = 0;
	for (int i = 0; i < data.length(); ++i) 
	{
		if (operations.find(data[i]) != -1) 
		{
			if (i == 0) 
			{
				return 0;
			}
			countOper++;
		}
		else if (data[i] == ' ') 
		{
			if (operations.find(data[i - 1]) == -1)
			{
				countNum++;
			}
		}
		else if (data[i] >= '0' && data[i] <= '9') 
		{
			if (i == data.length() - 1) 
			{
				return 0;
			}
			continue;
		}
		else if (data[i] == '.' || data[i] == '\0')
		{
			continue;
		}
		else 
		{
			return 0;
		}
	}
	if (countOper != countNum - 1) 
	{
		return 0;
	}
	return 1;
}

bool correctInputPrefix(string& data) 
{
	int countOper = 0; 
	int countNum = 0;
	if (data[0] == ' ') 
	{
		data.erase(0, 1);
	}
	for (int i = 0; i < data.length(); ++i) 
	{
		if (operations.find(data[i]) != -1) 
		{
			if (i == data.length() - 1) 
			{
				return 0;
			}
			countOper++;
		}
		else if (data[i] == ' ' || data[i] == '\0') 
		{
			if (operations.find(data[i - 1]) == -1)
			{
				countNum++;
			}
		}
		else if (data[i] >= '0' && data[i] <= '9') 
		{
			if (i == 0) 
			{
				return 0;
			}
			continue;
		}
		else if (data[i] == '.')
		{
			continue;
		}
		else 
		{
			return 0;
		}
	}
	if (countOper != countNum - 1) 
	{
		return 0;
	}
	return 1;
}

double action(double& value1, double& value2, string& oper) 
{
	switch (oper[0]) 
	{
	case '+':
		return value1 + value2;
		break;
	case '-':
		return value1 - value2;
		break;
	case '*':
		return value1 * value2;
		break;
	case '/':
		return value1 / value2;
		break;
	default:
		break;
	}
}

void calculate(string& data, bool prefix) 
{
	if (prefix) 
	{
		if (!correctInputPrefix(data)) 
		{
			cout << "Error!\n";
			return;
		}
		for (int j = data.length() - 1, i = 0; j >= i; --j, ++i) 
		{
			swap(data[j], data[i]);
		}
	}
	else 
	{
		if (!correctInputPostfix(data)) 
		{
			cout << "Error!\n";
			return;
		}
	}
	Stack numbers;
	string num;
	string sym;
	double val1;
	double val2;
	for (int i = 0; i <= data.length(); i++) 
	{
		sym = data[i];
		if (operations.find(sym) != -1) 
		{
			if (prefix) 
			{
				val1 = stod(numbers.pop(0));
				val2 = stod(numbers.pop(0));
			}
			else 
			{
				val2 = stod(numbers.pop(0));
				val1 = stod(numbers.pop(0));
			}

			numbers.push(to_string(action(val1, val2, sym)));
		}
		if (sym >= "0" && sym <= "9" || sym == ".") 
		{
			num += sym;
		}
		if (sym == " ") 
		{
			if (operations.find(data[i - 1]) != -1) 
			{
				continue;
			}
			if (prefix) 
			{
				for (int j = num.length() - 1, i = 0; j >= i; --j, ++i) 
				{
					swap(num[j], num[i]);
				}
			}
			numbers.push(num);
			num.erase(0, num.length());
		}
	}
	numbers.pop();
	cout << "\n";
}

void ReversePolishNotation(string& data, bool print = 1)
{
	Stack stack;
	string note;
	if (!correctInputInfix(data))
	{
		cout << "Error!\n";
		return;
	}
	string sym;
	for (int i = 0; i <= data.length(); ++i) 
	{
		if (data[i] == ' ') 
		{
			data.erase(i, 1);
		}
	}
	for (int i = 0; i < data.length(); i++) 
	{
		sym = data[i];
		if (sym >= "0" && sym <= "9" || sym == ".") 
		{
			note += sym;
			if (sym == "." || data[i + 1] == '.' || data[i + 1] >= '0' && data[i + 1] <= '9') 
			{
				continue;
			}
			note += " ";
			if (print) 
			{
				cout << "\nThe stack of operands: " << note << "\n";
				stack.output();
			}
		}
		if (sym == "(") 
		{
			stack.push(sym);
			if (print) 
			{
				cout << "\nThe stack of operands: " << note << "\n";
				stack.output();
			}
			continue;
		}
		if (sym == ")") 
		{
			while (stack.tail->symbol != "(") 
			{
				note += stack.pop(0);
				note += " ";
			}
			stack.pop(0);
			if (print) 
			{
				cout << "\nThe stack of operands: " << note << "\n";
				stack.output();
			}
			continue;
		}
		if (operations.find(sym) != -1) 
		{
			if (stack.isEmpty() || prior(stack.tail->symbol[0] < prior(sym[0]))) 
			{
				stack.push(sym);
				if (print) 
				{
					cout << "\nThe stack of operands: " << note << "\n";
					stack.output();
				}
			}
			else 
			{
				while (!stack.isEmpty() && prior(stack.tail->symbol[0]) >= prior(sym[0])) 
				{
					note += stack.pop(0);
					note += " ";
				}
				stack.push(sym);
				if (print) 
				{
					cout << "\nThe stack of operands: " << note << "\n";
					stack.output();
				}
			}
		}
	}
	if (print) 
	{
		cout << "\nThe stack of operands: " << note << "\n";
		stack.output();
	}
	while (!stack.isEmpty()) 
	{
		note += stack.pop(0);
		note += " ";
	};
	if (print) 
	{
		cout << "\nThe stack of operations: ";
	}
	cout << note << "\n";
	data = note;
}

void StraightPolishNotation(string& data) 
{
	if (!correctInputInfix(data)) 
	{
		cout << "Error!\n";
		return;
	}
	string note;
	for (int j = data.length() - 1; j >= 0; --j) 
	{
		if (data[j] == '(') 
		{
			note += ')';
		}
		else if (data[j] == ')') 
		{
			note += '(';
		}
		else if (data[j] == ' ') 
		{
			continue;
		}
		else 
		{
			note += data[j];
		}
	}
	cout << "Preparing... ";
	ReversePolishNotation(note, 0);
	data.erase(0, data.length());
	for (int j = note.length() - 1; j >= 0; --j) 
	{
		data += note[j];
	}
	data += '\0';
	cout << "Prefix: " << data << "\n";
}

void menu(string& data)
{
	int switcher;
	cout << "1. Infix to postfix\n" << "2. Infix to prefix\n" << "3. Calculate from postfix\n" << "4. Calculate from prefix\n" << "5. Checking\n" << "6. Exit\n";
	while (true)
	{
		cout << "Enter your choice: ";
		cin >> switcher;
		switch (switcher)
		{
		case 1:
			data.erase(0, data.length());
			cin.ignore();
			cout << "Enter the infix: ";
			getline(cin, data);
			ReversePolishNotation(data);
			break;
		case 2:
			data.erase(0, data.length());
			cin.ignore();
			cout << "Enter the infix: ";
			getline(cin, data);
			StraightPolishNotation(data);
			break;
		case 3:
			if (!correctInputPostfix(data)) 
			{
				cout << "You should to enter new reverse(postfix) note: ";
				cin.ignore();
				getline(cin, data);
				data += '\0';
			}
			else 
			{
				cout << "Do you want to enter new reverse(postfix) note? (\'no\'=0) ";
				cin >> switcher;
				if (switcher) 
				{
					data.erase(0, data.length());
					cin.ignore();
					getline(cin, data);
					data += '\0';
				}
			}
			calculate(data, 0);
			break;
		case 4:
			if (!correctInputPrefix(data)) 
			{
				cout << "You should to enter new prefix note: ";
				cin.ignore();
				getline(cin, data);
				data += '\0';
			}
			else 
			{
				cout << "Do you want to enter new prefix note? (Yes - 1, No - 0) ";
				cin >> switcher;
				if (switcher) 
				{
					data.erase(0, data.length());
					cin.ignore();
					getline(cin, data);
					data += '\0';
				}
				else
				{
					cin.ignore();
				}
			}
			calculate(data, 1);
			break;
		case 5:
			cout << "1. Infix\n2. Prefix\n3. Postfix\n";
			cin >> switcher;
			cout << "Enter the ";
			switch (switcher)
			{
			case 1:
				cout << "infix: ";
				break;
			case 2:
				cout << "prefix: ";
				break;
			case 3:
				cout << "postfix: ";
				break;
			}
			data.erase(0, data.length());
			cin.ignore();
			getline(cin, data);
			data += '\0';
			switch (switcher) 
			{
			case 1:
				if (correctInputInfix(data)) 
				{
					cout << "Correct!\n";
				}
				else 
				{
					cout << "Error!\n";
				}
				break;
			case 2:
				if (correctInputPrefix(data)) 
				{
					cout << "Correct!\n";
				}
				else 
				{
					cout << "Error!\n";
				}
				break;
			case 3:
				if (correctInputPostfix(data)) 
				{
					cout << "Correct!\n";
				}
				else 
				{
					cout << "Error!\n";
				}
				break;
			default:
				cout << "Error!\n";
			}
			break;
		default:
			return;
			break;
		}
	}
}

int main()
{
	string data = "";
	menu(data);
	return 0;
}
